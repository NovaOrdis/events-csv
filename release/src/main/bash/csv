#!/bin/bash

[ -f $(dirname $0)/bash-wrapper-functions ] && . $(dirname $0)/bash-wrapper-functions || { echo "[error]: $(dirname $0)/bash-wrapper-functions not found, the application was probably not installed correctly" 1>&2; exit 1; }

MAIN_CLASS=io.novaordis.events.csv.cli.Main
JAVA_DEBUG_ARGS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"
VERBOSE=false

function main() {

    #
    # loop over command line arguments and handle common arguments
    #

    local args
    local command
    local java_debug_args
    local separator=$'\x1f' # US - unit separator

    while [ -n "$1" ]; do

        debug "arg: $1"

        if [ "$1" = "-d" -o "$1" = "--debug" ]; then

            java_debug_args="${JAVA_DEBUG_ARGS}"

        elif [ "$1" = "-v" -o "$1" = "--verbose" ]; then

            VERBOSE=true

        elif [ -z "${command}" ]; then

            command=$1

        else

            #
            # accumulate the rest of the arguments between special separator characters to pass them to the java layer
            #
            [ -z "${args}" ] && args="$1" || args="${args}${separator}$1"
        fi

        shift

    done

    debug "command: ${command}"

    if [ "${command}" = "version" ]; then

        #
        # "version" handling - "light" version retrieval
        #

        debug "handling version"

        local version=$(get-version)
        if [ -n "${version}" ]; then

            #
            # display and exit
            #
            echo "${version}"
            return 0
        fi

        #
        # we weren't able to handle it satisfactory at the bash level, pass it to the java runtime at the front of
        # the argument list
        #

        [ -z "${args}" ] && args="${command}" || args="${command}${separator}${args}"

    else

        #
        # the command is not handled in bash, add it to the front of the argument list
        #

        [ -z "${args}" ] && args="${command}" || args="${command}${separator}${args}"
    fi

    local java_bin
    java_bin=$(get-java-binary) || exit 1

    local classpath
    classpath=$(get-classpath-from-directory $(dirname $0)/../lib true)

    ${VERBOSE} && verbose_system_property="-Dverbose=true"

    debug "java_bin: ${java_bin}"
    debug "classpath: ${classpath}"
    debug "args: ${args}"

    #
    # re-assemble the command line, by re-initializing the positional parameters, and pass it to the underlying process
    #
    IFS=${separator}
    set - ${args}
    IFS="$(printf ' \t\n')" # restore the standard separators

    debug "arguments: \"$@\""

    command="${java_bin} ${java_debug_args} -cp ${classpath} ${verbose_system_property} ${MAIN_CLASS} "$@
    debug ${command} "$@"
    ${command} "$@"
}

main "$@"
